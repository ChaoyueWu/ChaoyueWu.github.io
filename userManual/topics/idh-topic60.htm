<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<!-- saved from url=(0025)http://www.helpsmith.com/ -->
<head>
<title>操作示例</title>
<meta http-equiv="Content-Type" content="text/html; charset=gb2312" />
<meta name="generator" content="HelpSmith 6.0 (Build 15.616)" />
<style type="text/css" media="screen">
html {
  height: 100%;
}
body {
  margin: 4.25pt 4.25pt 4.25pt 4.25pt;
}
</style>
<link type="text/css" href="../css/topics/style.css" rel="stylesheet" />
<script type="text/javascript" src="../js/jquery-1.11.1.min.js"></script>
<script type="text/javascript" src="../js/settings.js?e96a06a9"></script>
<script type="text/javascript" src="../js/core.js?b5595709"></script>
<script type="text/javascript" src="../js/topic.js?b5595709"></script>
<script type="text/javascript">
	var topicContext = 60;
</script>
</head>
<body>
<p class="ps7"><span class="ts10">操作示例</span></p>
<p class="ps8"><span class="ts5">&nbsp;</span></p>
<p class="ps8"><span class="ts5">&nbsp;</span></p>
<p class="ps8"><span class="ts5">本部分将结合实际案例的分析检测流程来说明TsmartBD工具的操作方法。</span></p>
<p class="ps8"><span class="ts5">&nbsp;</span></p>
<p class="ps8"><span class="ts6">1. 配置工作</span></p>
<p class="ps8"><span class="ts5">&nbsp;</span></p>
<p class="ps8"><span class="ts5">首先获取TsmartBD工具之后，在一个不含中文字符的路径下进行解压。得到了3个模块，分别如下图所示：</span></p>
<p class="ps7"><span class="ts5">&nbsp;</span></p>
<p class="ps7"><span class="ts5">&nbsp;</span><img width="554" height="316" border="0" src="images/7267b363-8579-49f7-93b4-e3b77f64ffb1.002.png" /></p>
<p class="ps7"><span class="ts5">TsmartBD工具模块</span></p>
<p class="ps7"><span class="ts5">&nbsp;</span></p>
<p class="ps7"><span class="ts5">&nbsp;</span><img width="554" height="275" border="0" src="images/7267b363-8579-49f7-93b4-e3b77f64ffb1.003.png" /></p>
<p class="ps7"><span class="ts5">BuildCapture工具模块</span></p>
<p class="ps7"><span class="ts5">&nbsp;</span></p>
<p class="ps7"><img width="554" height="311" border="0" src="images/7267b363-8579-49f7-93b4-e3b77f64ffb1.004.png" /><span class="ts5">&nbsp;</span></p>
<p class="ps7"><span class="ts5">BugVisualizer模块</span></p>
<p class="ps8"><span class="ts5">&nbsp;</span></p>
<p class="ps8"><span class="ts5">在确认上述项目的模块均完备无误之后，下一步需要确认当前系统的编译环境。打开终端，执行java -version命令，观察当前系统的java版本是否是1.8及以上。</span></p>
<p class="ps7"><span class="ts5">&nbsp;</span></p>
<p class="ps7"><img width="554" height="334" border="0" src="images/7267b363-8579-49f7-93b4-e3b77f64ffb1.005.png" /><span class="ts5">&nbsp;</span></p>
<p class="ps7"><span class="ts5">确认当前java版本</span></p>
<p class="ps8"><span class="ts5">&nbsp;</span></p>
<p class="ps8"><span class="ts5">上述准备工作确认无误之后，可以进入下一步。</span></p>
<p class="ps8"><span class="ts5">&nbsp;</span></p>
<p class="ps8"><span class="ts5">&nbsp;</span></p>
<p class="ps8"><span class="ts6">2. 单文件检查示例</span></p>
<p class="ps8"><span class="ts5">&nbsp;</span></p>
<p class="ps8"><span class="ts5">首先我们准备一个需要检查的测试案例：</span></p>
<p class="ps8"><span class="ts5">&nbsp;</span></p>
<p class="ps7"><img width="596" height="913" border="0" src="images/code(1).jpg" /></p>
<p class="ps7"><span class="ts5">测试代码</span></p>
<p class="ps8"><span class="ts5">&nbsp;</span></p>
<p class="ps8">&nbsp;</p>
<p class="ps8"><span class="ts5">这里将其保存为：/home/c/testcase/3.c。</span></p>
<p class="ps8"><span class="ts5">&nbsp;</span></p>
<p class="ps8"><span class="ts5">随后我们开始对这个文件进行检查。首先进入TsmartBD模块所在目录，打开终端。依照上文所述，执行下列命令：</span></p>
<p class="ps7"><span class="ts5">&nbsp;</span></p>
<p class="ps7"><img width="554" height="330" border="0" src="images/7267b363-8579-49f7-93b4-e3b77f64ffb1.007.png" /><span class="ts5">&nbsp;</span></p>
<p class="ps7"><span class="ts5">样例代码的检测命令</span></p>
<p class="ps8"><span class="ts5">&nbsp;</span></p>
<p class="ps8"><span class="ts5">-manual后紧接待检测的文件的路径，-cwe后连接需要应用的cwe类型编号，最后的-output指定了检测结果的输出目录。</span></p>
<p class="ps8"><span class="ts5">&nbsp;</span></p>
<p class="ps8"><span class="ts5">执行成功后，看到如下输出：</span></p>
<p class="ps7"><span class="ts5">&nbsp;</span></p>
<p class="ps7"><img width="554" height="339" border="0" src="images/7267b363-8579-49f7-93b4-e3b77f64ffb1.008.png" /><span class="ts5">&nbsp;</span></p>
<p class="ps7"><span class="ts5">单文件检测的命令行输出</span></p>
<p class="ps8"><span class="ts5">&nbsp;</span></p>
<p class="ps8"><span class="ts5">终端信息提示4个cwe的检测均已完毕，并且成功地将结果输出到我们指定的目录之中。进入该输出目录可以看到如下文件：</span></p>
<p class="ps7"><span class="ts5">&nbsp;</span></p>
<p class="ps7"><img width="554" height="273" border="0" src="images/7267b363-8579-49f7-93b4-e3b77f64ffb1.009.png" /><span class="ts5">&nbsp;</span></p>
<p class="ps7"><span class="ts5">检测报告的目录结构</span></p>
<p class="ps8"><span class="ts5">&nbsp;</span></p>
<p class="ps8"><span class="ts5">其中output目录下存放了汇总后的输出报告。而output-1,2,3,4中则分别存放了单个cwe的检测报告，并且检测报告的排序与检测指令中cwe参数的顺序保持一致。为了获取对目标文件的完整检测结果，我们在这里对output目录下，汇总后的输出报告进行阅读。为了直观的阅读测试报告，这里我们需要用到BugVisualizer工具。</span></p>
<p class="ps8"><span class="ts5">&nbsp;</span></p>
<p class="ps8"><span class="ts5">打开BugVisualizer文件夹，并在这个目录下打开终端执行，下列命令：</span></p>
<p class="ps7"><span class="ts5">&nbsp;</span></p>
<p class="ps7"><span class="ts5">&nbsp;</span><img width="554" height="333" border="0" src="images/7267b363-8579-49f7-93b4-e3b77f64ffb1.010.png" /></p>
<p class="ps7"><span class="ts5">bugVisualizer的执行命令</span></p>
<p class="ps8"><span class="ts5">&nbsp;</span></p>
<p class="ps8"><span class="ts5">其中-report后紧接的是测试结果的汇总报告的存放目录。-project后的参数是被检测文件所存放的文件夹。-web则是BugVisualizer使用的默认模板。执行该命令之后，会自动打开浏览器，以网页的方式展示出测试结果，如下图所示：</span></p>
<p class="ps7"><span class="ts5">&nbsp;</span></p>
<p class="ps7"><img width="554" height="277" border="0" src="images/7267b363-8579-49f7-93b4-e3b77f64ffb1.011.png" /><span class="ts5">&nbsp;</span></p>
<p class="ps7"><span class="ts5">bugVisualizer的网页展示</span></p>
<p class="ps8"><span class="ts5">&nbsp;</span></p>
<p class="ps8"><span class="ts5">左侧一列中，第一栏Project展示了该目录下的所有C语言文件。第二栏Path展示了触发所选择的缺陷的执行流程，并且单击其中的任意一行，右侧的代码框将自动跳转到对应位置。</span></p>
<p class="ps8"><span class="ts5">&nbsp;</span></p>
<p class="ps8"><span class="ts5">中央上方一栏展示了检测的所有的缺陷，给出了缺陷的编号，严重度，可能性，缺陷类别。选择其中任意一个缺陷，Path栏和Code栏会进行对应的跳转。</span></p>
<p class="ps8"><span class="ts5">&nbsp;</span></p>
<p class="ps8"><span class="ts5">下方一栏展示了被测试文件的代码。</span></p>
<p class="ps8"><span class="ts5">&nbsp;</span></p>
<p class="ps8"><span class="ts5">右上方一栏提供了过滤器，允许筛选缺陷的类型。</span></p>
<p class="ps8"><span class="ts5">&nbsp;</span></p>
<p class="ps8"><span class="ts5">例如我们现在想关注函数返回栈上的临时变量的问题，可以选择第3个缺陷id，此时左下角的path路径会更新。新的path路径说明了触发这个问题时，整个程序的执行流程。我们再选中最后一行，这样可以得到直接触发问题的语句所在地点。</span></p>
<p class="ps7"><span class="ts5">&nbsp;</span></p>
<p class="ps7"><img width="554" height="248" border="0" src="images/7267b363-8579-49f7-93b4-e3b77f64ffb1.012.png" /><span class="ts5">&nbsp;</span></p>
<p class="ps7"><span class="ts5">缺陷的详细信息查看</span></p>
<p class="ps8"><span class="ts5">&nbsp;</span></p>
<p class="ps8"><span class="ts5">如图所示，选中path的最后一行后，提示了对于行int *c = add(a, b)。&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>
<p class="ps8"><span class="ts5">这就说明了本行中的函数返回值可能存在问题。因此可以将问题定位到add函数的本次调用之中。</span></p>
<p class="ps8"><span class="ts5">根据这个信息就能较为轻松的修复程序源代码中存在的问题。</span></p>
<p class="ps8"><span class="ts5">&nbsp;</span></p>
<p class="ps8"><span class="ts5">&nbsp;</span></p>
<p class="ps8"><span class="ts6">3.&nbsp; 复合项目检查示例</span></p>
<p class="ps8"><span class="ts5">&nbsp;</span></p>
<p class="ps8"><span class="ts5">首先工具模块获取和安装的部分，和单文件的检查流程一致，在此不再复述。直接进入检查部分。我们准备了grep项目作为待检测项目，grep项目的文件组织结构如下图所示：</span></p>
<p class="ps7"><span class="ts5">&nbsp;</span></p>
<p class="ps7"><img width="554" height="217" border="0" src="images/7267b363-8579-49f7-93b4-e3b77f64ffb1.013.png" /><span class="ts5">&nbsp;</span></p>
<p class="ps7"><span class="ts5">grep项目的文件组织结构</span></p>
<p class="ps8"><span class="ts5">&nbsp;</span></p>
<p class="ps8"><span class="ts5">如图所示，grep项目的编译依赖于其中的makefile。因此TsmartBD工具可以用于检测该项目。</span></p>
<p class="ps8"><span class="ts5">&nbsp;</span></p>
<p class="ps8"><span class="ts5">这里我们打算对grep项目进行编译抓取和检测，因此在开始之前，首先要确保grep项目之前的编译结果已经被清除。在grep项目下打开终端，执行make clean命令。随后在grep目录下按下ctrl+H显示隐藏文件，删除.process_makefile文件夹。最后进入要使用的output目录，删除其中所有文件。</span></p>
<p class="ps8"><span class="ts5">&nbsp;</span></p>
<p class="ps8"><span class="ts5">之后进入TsmartBD模块所在目录，打开终端，执行下列命令：</span></p>
<p class="ps7"><span class="ts5">&nbsp;</span></p>
<p class="ps7"><img width="554" height="331" border="0" src="images/7267b363-8579-49f7-93b4-e3b77f64ffb1.014.png" /><span class="ts5">&nbsp;</span></p>
<p class="ps7"><span class="ts5">grep项目的抓取检测命令</span></p>
<p class="ps8"><span class="ts5">&nbsp;</span></p>
<p class="ps8"><span class="ts5">随后终端会依次输出抓取信息和分析信息，运行成功后，输出结果如下图所示。</span></p>
<p class="ps7"><span class="ts5">&nbsp;</span></p>
<p class="ps7"><img width="554" height="329" border="0" src="images/7267b363-8579-49f7-93b4-e3b77f64ffb1.015.png" /><span class="ts5">&nbsp;</span></p>
<p class="ps7"><span class="ts5">grep项目的抓取检测输出</span></p>
<p class="ps8"><span class="ts5">&nbsp;</span></p>
<p class="ps8"><span class="ts5">TsmartBD工具会分析程序代码中所有的入口函数，进而取寻找问题。接下来进入BugVisualizer工具，来观察输出报告。由于缺陷的发生与程序的入口有关，因此这里不能直接进入总报告中，直接观察错误目录。TsmartBD工具为每个入口的测试报告单独生成了一个文件夹，如下图所示：</span></p>
<p class="ps7"><span class="ts5">&nbsp;</span></p>
<p class="ps7"><span class="ts5">&nbsp;</span><img width="554" height="300" border="0" src="images/7267b363-8579-49f7-93b4-e3b77f64ffb1.016.png" /></p>
<p class="ps7"><span class="ts5">分析结果的目录结构</span></p>
<p class="ps8"><span class="ts5">&nbsp;</span></p>
<p class="ps8"><span class="ts5">在观察测试报告的时候，需要进入对应入口的文件夹来进行阅读。</span></p>
<p class="ps8"><span class="ts5">&nbsp;</span></p>
<p class="ps8"><span class="ts5">例如，执行以下命令：</span></p>
<p class="ps7"><span class="ts5">&nbsp;</span></p>
<p class="ps7"><img width="554" height="328" border="0" src="images/7267b363-8579-49f7-93b4-e3b77f64ffb1.017.png" /><span class="ts5">&nbsp;</span></p>
<p class="ps7"><span class="ts5">bugVisualizer的执行命令2</span></p>
<p class="ps8"><span class="ts5">&nbsp;</span></p>
<p class="ps8"><span class="ts5">最后我们获得了一个测试报告：</span></p>
<p class="ps7"><span class="ts5">&nbsp;</span></p>
<p class="ps7"><img width="554" height="266" border="0" src="images/7267b363-8579-49f7-93b4-e3b77f64ffb1.018.png" /><span class="ts5">&nbsp;</span></p>
<p class="ps7"><span class="ts5">grep测试报告展示</span></p>
<p class="ps8"><span class="ts5">&nbsp;</span></p>
<p class="ps7"><span class="ts5">&nbsp;</span></p>
<p class="ps7"><span class="ts5">&nbsp;</span></p>
<p class="ps7"><a href="idh-topic10.htm" class="hs0">返回首页</a><span class="ts5">&nbsp;</span></p>
<p class="ps0"><br /></p>
<div>
  <div class="hline0"></div>
</div>
<p class="ps6"><span class="ts3">Created with an evaluation copy of HelpSmith.</span><br /><span class="ts3">To remove this notice, you should </span><a href="http://www.helpsmith.com/buynow.php" target="_blank" class="hs1">purchase the full version</a><span class="ts3">&nbsp;of the product.</span></p>
</body>
</html>